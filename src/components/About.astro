---
import { getLangFromUrl, useTranslations } from '@/i18n/utils';
import { Image } from 'astro:assets';
import programando from 'public/images/programando.png';
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<section id='about' class='w-full py-12 px-6 md:py-36 md:px-16'>
  <div class='max-w-6xl mx-auto flex flex-col-reverse items-center gap-8 md:grid md:grid-cols-2 md:items-center'>
    <div class='w-full reveal flex flex-col justify-center'>
      <h2 class='text-4xl md:text-7xl rillosta text-center md:text-left'>{t('about.title')}</h2>
      <p class='mt-4 text-2xl md:text-3xl pochita text-gray-700 dark:text-gray-300 text-center md:text-left'>
        {t('hero.description')}
      </p>

      <ul class='mt-6 flex gap-2 flex-wrap justify-center md:justify-start'>
        <li class='px-3 py-1 rounded-full bg-amber-100 dark:bg-amber-900 text-sm pochita'>Frontend</li>
        <li class='px-3 py-1 rounded-full bg-sky-100 dark:bg-sky-900 text-sm pochita'>Backend</li>
        <li class='px-3 py-1 rounded-full bg-emerald-100 dark:bg-emerald-900 text-sm pochita'>UI / UX</li>
      </ul>
    </div>

    <figure class='w-48 md:w-full flex justify-center md:justify-end reveal'>
      <Image src={programando} alt='Facundo programando' class='rounded-2xl w-48 h-48 md:w-[420px] md:h-auto object-cover' inferSize loading='eager' />
      <figcaption class='sr-only'>{t('about.title')}</figcaption>
    </figure>
  </div>
</section>

<style>
  /* simple reveal animation (mobile-first) */
  .reveal {
    opacity: 0;
    transform: translateY(12px);
    transition:
      opacity 0.6s ease,
      transform 0.6s ease;
  }
  .reveal.is-visible {
    opacity: 1;
    transform: translateY(0);
  }
</style>

<script>
  // intersection observer para animaciÃ³n al entrar en viewport
  if (typeof window !== 'undefined' && 'IntersectionObserver' in window) {
    const io = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add('is-visible');
            io.unobserve(entry.target);
          }
        });
      },
      { threshold: 0.15 }
    );

    document.querySelectorAll('.reveal').forEach((el) => io.observe(el));
  } else {
    // fallback: mostrar siempre
    document.querySelectorAll('.reveal').forEach((el) => el.classList.add('is-visible'));
  }
</script>
